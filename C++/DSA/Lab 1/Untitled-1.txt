Data Structure and Algorithms
1
LAB 1
REVIEW
Objective
Review some programming techniques such as string, array, file handling,
stack, queue, etc.
EXERCISE 1-1.
Write a program to read all strings in “input1.1.txt” and display it on the screen.
After that, count the number of distinct words and the number of sentences.
EXERCISE 1-2.
Write a complete program that opens a file for input (input1.2.txt) which
contains the number of rows and columns of the matrix and the matrix of
fractions. Check if the fractions have been irreducible. If not, reduce and export
the matrix of irreducible fractions to a file (output1.2.txt).
EXERCISE 1-3.
Write a complete program that opens a file for input (input1.3.txt) and a file
for output (output1.3.txt), reads temperature data from the input file, and
saves some statistics in the output file.
The input file will look like this:
7
70.0 69.0 69.0 68.0 67.0 67.5 67.3 68.0 69.2 72.1 74.3 78.3
72.4 69.4 69.4 68.4 67.4 67.2 67.7 68.4 69.2 72.1 74.7 78.7
70.0 69.0 69.0 68.0 67.0 67.2 67.7 68.0 69.2 73.1 74.7 78.3
71.1 69.1 69.1 69.1 67.1 67.2 67.7 69.1 69.2 73.1 74.7 78.7
70.6 69.6 69.6 68.6 65.6 65.2 65.0 68.6 69.2 72.1 74.0 78.0
70.3 68.3 68.3 68.3 67.3 67.5 67.7 68.3 68.5 73.1 74.7 77.7
69.4 70.4 70.4 68.4 67.4 67.2 67.7 68.4 70.2 72.1 74.7 78.7
What you see is an integer at the beginning that represents how many rows
will follow (7 rows for 7 days of temperature data). Then each of the 7 rows
has exactly 12 doubles. The input file represents temperature readings each
Data Structure and Algorithms
2
2-hours period for seven days (your program should work for input files with
more or fewer days; perhaps the input file has 2 days of data or 600 days of
data; there will always be 12 doubles for each day, however). Your program
should read this file and, for each day, find the average temperature, the
high temperature, and the low temperature. This information, for each day,
should be saved in the output file.
EXERCISE 1-4.
Write a program for reading three text files, “input1.4.1.txt”, “input1.4.2.txt”,
printing on the screen the line number and the lines that differ in both files,
adding “//” if the line corresponds to “input1.4.1.txt”, and “\\” if it
corresponds to “input1.4.2.txt”.
Example:
The output should be:
10// alo
10\\ ola
EXERCISE 1-5.
Write a program that receives three arguments: the first is 0 or 1, the second
one must be positive integer n, and the third is the name of a text file. If the first
argument is 0, the program print on the screen the first n lines of the given file.
If the first argument is 1, the program print on the screen the last n lines of the
given file.
(Notes that the file maybe has 100000000000000 lines)
EXERCISE 1-6.
Create a program that shows a stack of characters. The program will implement
the stack using an array. Do not use the stack library. Create the menu to test
functions by push, pop some characters. Note that testing empty case and full
case.
EXERCISE 1-7.
Create a program that shows a queue of integers. The program will implement
the queue using an array. Create the menu to test functions by enqueue,
Data Structure and Algorithms
3
dequeue some characters. Do not use the queue library. Note that testing empty
case and full case.
EXERCISE 1-8.
Write a program that checks that an input string is a palindrome or not. The
input file “input1.8.1.txt” contains several lines.
Ex:
“Hannah”
"Madam, I'm Adam."
"Enid and Edna dine."
EXERCISE 1-9.
Write a program that stores the personal information of a student (such as
full name, birthdate, address, class, student ID) in a structure that you will
define and then write the record to binary file “output1.9.bin”.
Create the menu in the program which allows users to enter the information
of several students.
EXERCISE 1-10.
Write a program that extracts student data from the binary file which is saved
in Exercise 1-9 and prints to console window in list view.
Terms of submission
Students do each exercise in separate projects, then compress them with the
name <StudentID>.zip. Then submit this compressed file.
Similar source code, plagiarism or spam submissions will score 0 in this
SUBJECT.